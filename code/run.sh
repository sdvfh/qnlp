#!/bin/bash
export TOKENIZERS_PARALLELISM=false

autogenerated_datasets=(chatgpt_easy chatgpt_medium chatgpt_hard)

quantum_classifiers=(singlerotx singleroty singlerotz rot rotcnot \
                     maouaki1 maouaki6 maouakiquasi7 maouaki7\
                     maouaki9 maouaki15 ent1 ent2 ent3 ent4)

classical_classifiers=(svmrbf svmlinear svmpoly logistic randomforest knn mlp)

quantum_ensembles=(adaboost_rotcnot bagging_rotcnot adaboost_ent4 bagging_ent4\
                   adaboost_maouaki15 bagging_maouaki15 soft_voting_1_2_3\
                   hard_voting_1_2_3 soft_voting_1_2_3_5 hard_voting_1_2_3_5\
                   soft_voting_1_2_3_5_6 hard_voting_1_2_3_5_6 soft_voting_7_8_9_10_11\
                   hard_voting_7_8_9_10_11 soft_voting_12_14_15 hard_voting_12_14_15)

classical_ensembles=(adaboost_logistic bagging_logistic soft_voting_svm\
                     hard_voting_svm soft_voting_logistic_mlp_knn\
                     hard_voting_logistic_mlp_knn)

# Autogenerated datasets, classical experiments
for dataset in "${autogenerated_datasets[@]}"; do
  for classifier in "${classical_classifiers[@]}"; do
    for layers in 1; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 768 --n_qubits 10 -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 32  --n_qubits 5  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "nomic-ai/nomic-embed-text-v1.5"      -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "all-mpnet-base-v2"                   -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Autogenerated datasets, quantum experiments
for dataset in "${autogenerated_datasets[@]}"; do
  for classifier in "${quantum_classifiers[@]}"; do
    for layers in 1 10; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 768 --n_qubits 10 -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 32  --n_qubits 5  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "nomic-ai/nomic-embed-text-v1.5"      -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ; \
      python experiments.py -dataset "$dataset" -model_transformer "all-mpnet-base-v2"                   -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Real dataset, classical experiments
for dataset in sst; do
  for classifier in "${classical_classifiers[@]}"; do
    for layers in 1; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 512 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Real dataset, quantum experiments
for dataset in sst; do
  for classifier in "${quantum_classifiers[@]}"; do
    for layers in 1 10; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 512 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Real dataset, classical ensemble experiments
for dataset in sst; do
  for classifier in "${classical_ensembles[@]}"; do
    for layers in 1; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 512 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Real dataset, quantum ensemble experiments
for dataset in sst; do
  for classifier in "${quantum_ensembles[@]}"; do
    for layers in 1 10; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 512 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Autogenerated datasets, classical ensemble experiments
for dataset in "${autogenerated_datasets[@]}"; do
  for classifier in "${classical_ensembles[@]}"; do
    for layers in 1; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done

# Autogenerated dataset, quantum ensemble experiments
for dataset in "${autogenerated_datasets[@]}"; do
  for classifier in "${quantum_ensembles[@]}"; do
    for layers in 1 10; do
      python experiments.py -dataset "$dataset" -model_transformer "tomaarsen/mpnet-base-nli-matryoshka" -n_features 16  --n_qubits 4  -model_classifier "$classifier" --epochs 40 --batch_size 20 --n_repetitions 30 --n_layers "$layers" ;
    done
  done
done
